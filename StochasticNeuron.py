import numpy as np

'''
This class is an implementation of the stochastic neurons described in the paper
introducing the wake-sleep algorithm. Each neuron v takes a vector s_u of binary values
generated by all the other neurons (each denoted as neuron u) and outputs a 0 or 1
with a specific probability based on its own bias b_v and the weight of its
own connection with each neuron u, w_uv.
'''
class StochasticNeuron():

	'''
	initialize neuron with the connection weights w/ all
	other neurons and its own bias
	'''
	def __init__(self, connection_weights = np.array([]), bias = 0):
		# weights of each connection shared with another neuron u, w_uv
		self.connection_weights = np.array(connection_weights)

		# own bias b_v
		self.bias = bias


	'''
	compute the probability that the output s_v
	will be 1
	'''
	def compute_probability(self, neuron_inputs):
		neuron_inputs = np.array(neuron_inputs)
		sum_over_inputs = np.sum(self.connection_weights * neuron_inputs)
		exponent = (-self.bias) - sum_over_inputs
		return 1.0 / (1 + np.exp(exponent))


	'''
	Given set of inputs, find the probability of outputting 
	a 1, and then output either a 1 or a 0
	'''
	def output_binary_value(self, neuron_inputs):
		prob_output_is_1 = self.compute_probability(neuron_inputs)
		return np.random.binomial(1, prob_output_is_1)

